syntax = "proto3";

package ttr;
message Nothing{}
message Wagon{
  string color = 1;
}
message Route{
  string begin = 1;
  string end = 2;
  int32 points = 3;
}
message Player{
  int32 wagons_left = 1;
  int32 current_score = 2;
  int32 routes_num = 3;
}
message Point {
  int32 x = 1;
  int32 y = 2;
};

message Rectangle {
  repeated Point points = 1;
};
message WagonBlock {
  string color = 1;
  Rectangle coords = 2;
  int32 id = 3;
};
message  Path{
  string start = 1;
  string finish = 2;
  string color = 3;
  int32 number_of_colored_wagons = 4;
  int32 number_of_locomotives = 5;
  bool is_tunnel = 6;
  int32 owner = 7;
  repeated WagonBlock wagon_blocks = 8;
  int32 length = 9;
}
message Card{
  enum Type{
    Wagon = 0;
    Route = 1;
  }
  Type type = 1;
  Wagon wagon_info = 2;
  Route route = 3;
}
message Players{
  repeated Player all_players = 1;
}

message Board{
  repeated Path paths = 1;
}
message Deck{
  repeated Card cards_on_table = 1;
}
message BoardState{
  Board board_state = 1;
  Deck deck_state = 2;
  Players all_players = 3;
}

message Wagons{
  repeated Wagon wagons = 1;
}
message MakeTurnRequest{
  string type = 1;
  PlayerID id = 2;
  int32 active_card_id = 3;
  int32 path_to_build_id = 4;
  string station_to_build_id = 5;
  Wagon color_to_build = 6;
}
message Routes{
  repeated Route routes = 1;
}
message PrivatePlayerInfo{
  Wagons player_wagons = 2;
  Routes player_routes = 3;
}
message PlayerState{
  Player player_general_info = 1;
  PrivatePlayerInfo private_info = 2;
}
message PlayerID{
  int32 id = 1;
}
message BOOL{
  bool value = 1;
}
message INT_ARRAY{
  repeated int32 values = 1;
}
service TTRService{
  rpc get_board_state(Nothing) returns (BoardState);
  rpc make_turn(MakeTurnRequest) returns (Nothing);
  rpc get_player_state(PlayerID) returns(PlayerState);
  rpc check_end_game(Nothing) returns(BOOL);
  rpc get_player_id(Nothing) returns(PlayerID);
  rpc get_score(Nothing) returns(INT_ARRAY);
  rpc start_game(Nothing) returns(Nothing);
  rpc check_is_bot(PlayerID) returns(BOOL);
}